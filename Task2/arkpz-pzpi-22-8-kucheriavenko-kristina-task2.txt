Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра програмної інженерії




Звіт
з лабораторної роботи №2
з дисципліни  «Аналіз та рефакторинг коду»
на тему «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»



Виконала:						    Перевірив:
Ст. гр. ПЗПІ-22-8                                  	    ст. викл. Сокорчук І. П.
Кучерявенко К. Р. 




Харків 2024
2 РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)
2.1 Мета роботи


Розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу.


2.2 Хід роботи
2.2.1 Опис інженерних рішень


Посилання на відеоролик: https://youtu.be/6c6CpT0xdp0

Spring Boot обрано через його простоту налаштування, високу продуктивність і широкий набір функціональних можливостей для створення серверних програм. 
Основні рішення включають:
–	проєкт структурований за підходом MVC (Model-View-Controller);
–	DI (Dependency Injection): завдяки Spring Container залежності керуються автоматично, що полегшує тестування та рефакторинг;
–	spring-boot-starter-web для створення REST API;
–	spring-boot-starter-data-jpa для роботи з базою даних через ORM;
–	spring-boot-starter-validation для валідації вхідних даних;
–	Hibernate для взаємодії з базою даних;
–	REST API обробляється через контролери (@RestController).
PostgreSQL обрано через її потужність, відповідність стандартам SQL і розширені функції для роботи з даними. 
Основні інженерні рішення:
–	конфігурація через application.properties;
–	завдяки Spring Data JPA розробка обмежується створенням інтерфейсів, таких як JpaRepository, що автоматично реалізує CRUD-операції;
–	SQL-запити можна визначати у вигляді JPQL (Java Persistence Query Language) або Native Query.


2.2.2 Специфікація API для взаємодії серверної частини з клієнтами


Специфікація API для взаємодії серверної частини з клієнтами знаходиться у додатку А.


2.2.3 Логіка взаємодії серверної частини з БД


Моделі (Entity) відповідають за структуру даних, які зберігаються в базі. Використовуються ORM (JPA) для відображення об'єктів Java у таблиці БД. Приклад коду у додатку Б.
Репозиторії (Repository) виконують безпосередні операції з базою даних, використовують JpaRepository. Приклад коду для таблиці «Користувачі»:
01 @Repository
02 public interface UserRepository extends JpaRepository<User, Long> {
03 }
Сервіси (Service) містять бізнес-логіку роботи з даними, які приходять із БД, взаємодіють із репозиторіями. Приклад коду у додатку В.
Конфігурації бази даних зберігаються в application.properties.
Контролери (Controllers) є вхідною точкою для обробки запитів від клієнтів. Вони приймають HTTP-запити, викликають відповідні методи сервісів для виконання бізнес-логіки, та формують HTTP-відповіді. Контролери також забезпечують маршрутизацію запитів до відповідних сервісів на основі URL та методів HTTP. Приклад коду у додатку Г.


2.2.4 Фрагменти програмного коду: логіка взаємодії серверної частини з клієнтами.


Контролери (Controller) приймають HTTP-запити від клієнтів, викликають сервіси для виконання бізнес-логіки, повертають відповіді у форматі JSON, XML чи іншому, залежно від потреб клієнта. Код у додатку В.
Аннотації: @RestController, @RequestMapping, @PostMapping, @GetMapping, @PutMapping, @DeleteMapping.
Валідація (Validation) перевіряє правильність даних, які надходять від клієнта. Клас з моделлю використовує валідацію.
Аннотації: @NotBlank, @Future, @ NotNull, тощо.
Глобальні обробники для відповідей з помилками. Використовуються @ControllerAdvice та @ExceptionHandler.

2.2.5 Графічні ілюстрації (рисунки)


Для більшого розуміння створено графічні ілюстрації, де виділено основний сценарій використання системи. Також створено дві діаграми до бази даних для демонстрації зв’язків та структури таблиць. 

 
Рисунок 1.1 – UML діаграма прецедентів для серверної частини

 
Рисунок 1.2 – ER діаграма бази даних

 
Рисунок 1.3 – Діаграма структури бази даних

Висновки: під час роботи було розроблено базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
Додаток А
Специфікація API


## Контролери 

# BiologicalMaterialController API

## Маршрути

### Add Biological Material

**POST** '/api/biological-materials/admin/{userId}/add'

#### Опис

Додає новий біологічний матеріал від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.

Body:
- materialName (String): Назва біологічного матеріалу.
- expirationDate (Date): Дата закінчення терміну придатності.
- status (String): Статус донорства.
- transferDate (Date): Дата передачі матеріалу.
- donorID (Long): Ідентифікатор донора.

#### Відповідь 

- 200 OK:
  - BiologicalMaterial (object): Об'єкт створеного матеріалу.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Адміністратора не знайдено.

### Get Biological Material By ID

**GET** '/api/biological-materials/{materialID}'

#### Опис

Отримує біологічний матеріал за його унікальним ідентифікатором.

#### Параметри запиту
Path:
- materialID (Long): Ідентифікатор матеріалу.

#### Відповідь 

- 200 OK:
  - BiologicalMaterial (object): Біологічний матеріал за вказаним ідентифікатором.
- 404 Not Found:
  - message (string): Повідомлення про те, що матеріал не знайдено.

### Get All Biological Materials

**GET** '/api/biological-materials'

#### Опис

Отримує всі біологічні матеріали.

#### Параметри запиту
Path:
- materialID (Long): Ідентифікатор матеріалу.

#### Відповідь 

- 200 OK:
  - List<BiologicalMaterial> (Array): Список усіх біологічних матеріалів.


### Update Biological Material

**PUT** '/api/biological-materials/admin/{userId}/{materialID}'

#### Опис

Оновлює існуючий біологічний матеріал від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- materialID (Long): Ідентифікатор матеріалу, який потрібно оновити.
  
Body:
- materialName (String): Назва біологічного матеріалу.
- expirationDate (Date): Дата закінчення терміну придатності.
- status (String): Статус донорства.
- transferDate (Date): Дата передачі матеріалу.
- donorID (Long): Ідентифікатор донора.

#### Відповідь 

- 200 OK:
  - BiologicalMaterial (Object): Оновлений біологічний матеріал.
- 400 Bad Request:
  - message (String): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (String): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (String): Повідомлення про те, що матеріал не знайдено.

### Delete Biological Material

**DELETE** '/api/biological-materials/admin/{userId}/{materialID}'

#### Опис

Видаляє біологічний матеріал від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- materialID (Long): Ідентифікатор матеріалу, який потрібно видалити.

#### Відповідь 

- 204 No Content:
  - Видалення матеріалу відбулося успішно.
- 404 Not Found:
  - message (String): Повідомлення про те, що матеріал не знайдено.

# DonorController API

## Маршрути

### Add Donor

**POST** '/api/donors/admin/{userId}/add'

#### Опис

Додає нового донора від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.

Body:
- firstName (String): Ім'я донора.
- lastName (String): Прізвище донора.
- birthDate (Date): Дата народження донора.
- gender (Gender): Стать донора.
- idNumber (String): Ідентифікаційний номер донора.
- bloodType (RhFactorOfBlood): Група крові донора.
- transplantRestrictions (String): Обмеження на трансплантацію.

#### Відповідь 

- 200 OK:
  - Donor (object): Об'єкт створеного донора.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Адміністратора не знайдено.

### Get Donor By ID

**GET** '/api/donors/{DonorID}'

#### Опис

Отримує інформацію про донора за його унікальним ідентифікатором.

#### Параметри запиту
Path:
- DonorID (Long): Ідентифікатор донора.

#### Відповідь 

- 200 OK:
  - Donor (object): Донор за вказаним ідентифікатором.
- 404 Not Found:
  - message (string): Повідомлення про те, що донор не знайдений.

### Get All Donors

**GET** '/api/donors'

#### Опис

Отримує список усіх донорів.

#### Відповідь 

- 200 OK:
  - List<Donor> (Array): Список усіх донорів.

### Update Donor

**PUT** '/api/donors/admin/{userId}/{DonorID}'

#### Опис

Оновлює існуючого донора від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- DonorID (Long): Ідентифікатор донора, якого потрібно оновити.
  
Body:
- firstName (String): Ім'я донора.
- lastName (String): Прізвище донора.
- birthDate (Date): Дата народження донора.
- gender (Gender): Стать донора.
- idNumber (String): Ідентифікаційний номер донора.
- bloodType (RhFactorOfBlood): Група крові донора.
- transplantRestrictions (String): Обмеження на трансплантацію.

#### Відповідь 

- 200 OK:
  - Donor (Object): Оновлений об'єкт донора.
- 400 Bad Request:
  - message (String): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (String): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (String): Повідомлення про те, що донор не знайдений.

### Delete Donor

**DELETE** '/api/donors/admin/{userId}/{id}'

#### Опис

Видаляє донора від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор донора, якого потрібно видалити.

#### Відповідь 

- 204 No Content:
  - Видалення донора відбулося успішно.
- 404 Not Found:
  - message (String): Повідомлення про те, що донор не знайдений.

# EventLogController API

## Маршрути

### Add Event Log

**POST** '/api/event-logs/admin/{userId}/add'

#### Опис

Додає новий запис про подію від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
  
Body:

#### Відповідь 

- 200 OK:
  - EventLog (object): Об'єкт створеного запису про подію.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Адміністратора не знайдено.

### Get Event Log By ID

**GET** '/api/event-logs/admin/{userId}/{id}'

#### Опис

Отримує запис про подію за його унікальним ідентифікатором.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор запису.

#### Відповідь 

- 200 OK:
  - EventLog (object): Запис про подію за вказаним ідентифікатором.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Запис не знайдено.

### Get All Event Logs

**GET** '/api/event-logs/admin/{userId}'

#### Опис

Отримує всі записи про події.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.

#### Відповідь 

- 200 OK:
  - List<EventLog> (Array): Список всіх записів про події.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.

### Update Event Log

**PUT** '/api/event-logs/admin/{userId}/{id}'

#### Опис

Оновлює існуючий запис про подію від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор запису, який потрібно оновити.
  
Body:
- actionDetails (String): Деталі дії.
- actionTime (Date): Час виконання дії.

#### Відповідь 

- 200 OK:
  - EventLog (Object): Оновлений запис про подію.
- 400 Bad Request:
  - message (String): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (String): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (String): Запис не знайдено.

### Delete Event Log

**DELETE** '/api/event-logs/admin/{userId}/{id}'

#### Опис

Видаляє запис про подію від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор запису, який потрібно видалити.

#### Відповідь 

- 204 No Content:
  - Видалення запису про подію відбулося успішно.
- 403 Forbidden:
  - message (String): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (String): Запис не знайдено.
 
# NotificationController API

## Маршрути

### Add Notification

**POST** '/api/notifications/admin/{userId}/add'

#### Опис

Додає нове сповіщення від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
  
Body:
- eventTime (Date): Час події.
- eventType (String): Тип події.
- details (String): Деталі сповіщення.
- status (String): Статус сповіщення.
- materialID (BiologicalMaterial): Біологічний матеріал, що пов'язаний зі сповіщенням.

#### Відповідь 

- 200 OK:
  - Notification (object): Об'єкт створеного сповіщення.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Адміністратора не знайдено.

### Get Notification By ID

**GET** '/api/notifications/{id}'

#### Опис

Отримує сповіщення за його унікальним ідентифікатором.

#### Параметри запиту
Path:
- id (Long): Ідентифікатор сповіщення.

#### Відповідь 

- 200 OK:
  - Notification (object): Сповіщення за вказаним ідентифікатором.
- 404 Not Found:
  - message (string): Повідомлення про те, що сповіщення не знайдено.

### Get All Notifications

**GET** '/api/notifications'

#### Опис

Отримує список усіх сповіщень.

#### Відповідь 

- 200 OK:
  - List<Notification> (Array): Список усіх сповіщень.

### Update Notification

**PUT** '/api/notifications/admin/{userId}/{id}'

#### Опис

Оновлює існуюче сповіщення від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор сповіщення, яке потрібно оновити.
  
Body:
- eventTime (Date): Час події.
- eventType (String): Тип події.
- details (String): Деталі сповіщення.
- status (String): Статус сповіщення.
- materialID (BiologicalMaterial): Біологічний матеріал, що пов'язаний зі сповіщенням.

#### Відповідь 

- 200 OK:
  - Notification (Object): Оновлений об'єкт сповіщення.
- 400 Bad Request:
  - message (String): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (String): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (String): Повідомлення про те, що сповіщення не знайдено.

### Delete Notification

**DELETE** '/api/notifications/admin/{userId}/{id}'

#### Опис

Видаляє сповіщення від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор сповіщення, яке потрібно видалити.

#### Відповідь 

- 204 No Content:
  - Видалення сповіщення відбулося успішно.
- 404 Not Found:
  - message (String): Повідомлення про те, що сповіщення не знайдено.

# ReportController API

## Маршрути

### Add Report

**POST** '/api/reports/admin/{userId}/add'

#### Опис

Додає новий звіт від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
  
Body:
- reportType (String): Тип звіту.
- creationDate (Date): Дата створення звіту.
- text (String): Текст звіту.
- fileLink (String): Посилання на файл звіту.
- eventLogID (EventLog): Пов'язаний ідентифікатор журналу подій.

#### Відповідь 

- 200 OK:
  - Report (object): Об'єкт створеного звіту.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Адміністратора не знайдено.

### Get Report By ID

**GET** '/api/reports/{id}'

#### Опис

Отримує звіт за його унікальним ідентифікатором.

#### Параметри запиту
Path:
- id (Long): Ідентифікатор звіту.

#### Відповідь 

- 200 OK:
  - Report (object): Звіт за вказаним ідентифікатором.
- 404 Not Found:
  - message (string): Повідомлення про те, що звіт не знайдено.

### Get All Reports

**GET** '/api/reports'

#### Опис

Отримує список усіх звітів.

#### Відповідь 

- 200 OK:
  - List<Report> (Array): Список усіх звітів.

### Update Report

**PUT** '/api/reports/admin/{userId}/{id}'

#### Опис

Оновлює існуючий звіт від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор звіту, який потрібно оновити.
  
Body:
- reportType (String): Тип звіту.
- creationDate (Date): Дата створення звіту.
- text (String): Текст звіту.
- fileLink (String): Посилання на файл звіту.
- eventLogID (EventLog): Пов'язаний ідентифікатор журналу подій.

#### Відповідь 

- 200 OK:
  - Report (Object): Оновлений об'єкт звіту.
- 400 Bad Request:
  - message (String): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (String): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (String): Повідомлення про те, що звіт не знайдено.

### Delete Report

**DELETE** '/api/reports/admin/{userId}/{id}'

#### Опис

Видаляє звіт від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор звіту, яке потрібно видалити.

#### Відповідь 

- 204 No Content:
  - Видалення звіту відбулося успішно.
- 404 Not Found:
  - message (String): Повідомлення про те, що звіт не знайдено.
 
# StorageConditionController API

## Маршрути

### Add Storage Condition

**POST** '/api/storage-conditions/admin/{userId}/add'

#### Опис

Додає нові умови зберігання від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
  
Body:
- temperature (double): Температура зберігання.
- oxygenLevel (double): Рівень кисню.
- humidity (double): Вологість.
- measurementTime (Date): Час вимірювання.
- materialID (BiologicalMaterial): Ідентифікатор біологічного матеріалу.

#### Відповідь 

- 200 OK:
  - StorageCondition (object): Об'єкт створених умов зберігання.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Адміністратора не знайдено.

### Get Storage Condition By ID

**GET** '/api/storage-conditions/{id}'

#### Опис

Отримує умови зберігання за їх унікальним ідентифікатором.

#### Параметри запиту
Path:
- id (Long): Ідентифікатор умови зберігання.

#### Відповідь 

- 200 OK:
  - StorageCondition (object): Умова зберігання за вказаним ідентифікатором.
- 404 Not Found:
  - message (string): Повідомлення про те, що умова зберігання не знайдена.

### Get All Storage Conditions

**GET** '/api/storage-conditions'

#### Опис

Отримує список усіх умов зберігання.

#### Відповідь 

- 200 OK:
  - List<StorageCondition> (Array): Список усіх умов зберігання.

### Update Storage Condition

**PUT** '/api/storage-conditions/admin/{userId}/{id}'

#### Опис

Оновлює існуючі умови зберігання від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор умови зберігання, яку потрібно оновити.
  
Body:
- temperature (double): Температура зберігання.
- oxygenLevel (double): Рівень кисню.
- humidity (double): Вологість.
- measurementTime (Date): Час вимірювання.
- materialID (BiologicalMaterial): Ідентифікатор біологічного матеріалу.

#### Відповідь 

- 200 OK:
  - StorageCondition (object): Оновлений об'єкт умови зберігання.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Відсутність дозволу на виконання дії.
- 404 Not Found:
  - message (string): Повідомлення про те, що умова зберігання не знайдена.

### Delete Storage Condition

**DELETE** '/api/storage-conditions/admin/{userId}/{id}'

#### Опис

Видаляє умову зберігання від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.
- id (Long): Ідентифікатор умови зберігання, яку потрібно видалити.

#### Відповідь 

- 204 No Content:
  - Видалення умови зберігання відбулося успішно.
- 404 Not Found:
  - message (string): Повідомлення про те, що умова зберігання не знайдена.

# UserController API

## Маршрути

### Create User

**POST** '/api/users'

#### Опис

Створює нового користувача.

#### Параметри запиту

Body:
- firstName (String): Ім'я користувача.
- lastName (String): Призвище користувача.
- role (String): Роль користувача.
- accessRights (Access): Права доступу (READ_ONLY, READ_FULL FULL).
- login (String): Логін користувача (електронна пошта).
- password (String): Пароль користувача.

#### Відповідь

- 200 OK:
  - User (object): Об'єкт створеного користувача.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.

### Create User by Admin

**POST** '/api/users/admin/{userId}/add'

#### Опис

Створює нового користувача від імені адміністратора.

#### Параметри запиту
Path:
- userId (Long): Ідентифікатор адміністратора, що виконує дію.

Body:
- firstName (String): Ім'я користувача.
- lastName (String): Призвище користувача.
- role (String): Роль користувача.
- accessRights (Access): Права доступу (READ_FULL, READ_ONLY, FULL).
- login (String): Логін користувача (електронна пошта).
- password (String): Пароль користувача.

#### Відповідь

- 200 OK:
  - User (object): Об'єкт створеного користувача.
- 400 Bad Request:
  - message (string): Повідомлення про помилку у вхідних даних.
- 403 Forbidden:
  - message (string): Адміністратор не має прав для створення користувача.

### Get User by ID

**GET** '/api/users/{id}'

#### Опис

Отримує користувача за його унікальним ідентифікатором.

#### Параметри запиту
Path:
- id (Long): Ідентифікатор користувача.

#### Відповідь

- 200 OK:
  - User (object): Користувач за вказаним ідентифікатором.
- 404 Not Found:
  - message (string): Повідомлення про те, що користувач не знайдений.

# AuthController API

## Маршрути

### Login (User Login)

**POST** '/log/in'

#### Опис

Використовуються для входу користувача до системи. Використовує логін (електронну пошту) та пароль для автентифікації.

#### Параметри запиту
Body:
- login (String): Логін користувача (email).
- password (String): Пароль користувача.

#### Відповідь 

- 200 OK:
  - message (string): Повідомлення про успішний вхід "Вхід успішний. Ваш ID: [userID]".
- 401 Unauthorized:
  - message (string): Повідомлення про невірні облікові дані.

### Logout (User Logout)

**POST** '/log/out'

#### Опис

Використовуються для виходу користувача з системи, закінчуючи сесію.

#### Параметри запиту
Query:
- userId (Long): Ідентифікатор користувача, який виходить.

#### Відповідь 

- 200 OK:
  - message (string): Повідомлення про успішний вихід "Вихід успішний".
 
# Моделів даних

## BiologicalMaterial
Модель для біологічного матеріалу.

- `materialID` - Унікальний ідентифікатор біологічного матеріалу
- `materialName` - Назва біологічного матеріалу (від 2 до 100 символів)
- `expirationDate` - Дата закінчення терміну придатності біологічного матеріалу (має бути у майбутньому)
- `status` - Статус пожертвування (потрібно вказати статус пожертвування: `AVAILABLE`, `COLLECTED`, `DONATED`, `PENDING` `DISPOSED` )
- `transferDate` - Дата передачі матеріалу (має бути в минулому або поточному часі)
- `donorID` - Ідентифікатор донора, що надав біологічний матеріал (не може бути порожнім)

## Donor
Модель для донора біологічного матеріалу.

- `donorID` - Унікальний ідентифікатор донора
- `firstName` - Ім'я донора (від 2 до 100 символів)
- `lastName` - Прізвище донора (від 2 до 100 символів)
- `birthDate` - Дата народження донора (має бути в минулому)
- `gender` - Стать донора (`MALE`, `FEMALE`)
- `idNumber` - Ідентифікаційний номер донора (10 символів, алфавітно-цифровий формат)
- `bloodType` - Група крові донора (наприклад, `A_POS`, `O_NEG`)
- `transplantRestrictions` - Обмеження на трансплантацію (не більше 500 символів)

## EventLog
Модель для запису дій користувача в системі.

- `eventLogID` - Унікальний ідентифікатор запису події
- `actionDetails` - Опис дії користувача (від 2 до 1000 символів)
- `actionTime` - Час виконання дії (має бути в минулому або поточному часі)
- `creatorID` - Ідентифікатор користувача, що виконав дію (може бути порожнім)

## Notification
Модель для сповіщення про події в системі.
- `notificationID` - Унікальний ідентифікатор сповіщення
- `eventTime` - Час події (має бути в минулому або поточному часі)
- `eventType` - Тип події (від 2 до 100 символів)
- `details` - Опис події (від 5 до 500 символів)
- `status` - Статус сповіщення (від 2 до 50 символів)
- `materialID` - Ідентифікатор біологічного матеріалу, пов'язаного з подією (не може бути порожнім)

## Report
Модель для звіту в системі.
- `reportID` - Унікальний ідентифікатор звіту
- `reportType` - Тип звіту (від 2 до 100 символів)
- `creationDate` - Дата створення звіту (має бути в минулому або поточному часі)
- `text` - Текст звіту (від 5 до 1000 символів)
- `fileLink` - Посилання на файл звіту (від 5 до 500 символів)
- `eventLogID` - Ідентифікатор запису події, до якої прив'язаний звіт (не може бути порожнім)

## StorageCondition
Модель для умов зберігання біологічного матеріалу.
- `recordID` - Унікальний ідентифікатор запису умов зберігання
- `temperature` - Температура (від -100 до 100 градусів, не може бути порожнім)
- `oxygenLevel` - Рівень кисню (від 0 до 100%, не може бути порожнім)
- `humidity` - Вологість (від 0 до 100%, не може бути порожнім)
- `measurementTime` - Час вимірювання (має бути в минулому або поточному часі)
- `materialID` - Ідентифікатор біологічного матеріалу, до якого відносяться умови зберігання (не може бути порожнім)

## User
Модель для користувача системи.
- `userID` - Унікальний ідентифікатор користувача
- `firstName` - Ім'я користувача (від 2 до 255 символів)
- `lastName` - Призвище користувача (від 2 до 255 символів)
- `role` - Роль користувача (від 2 до 255 символів)
- `accessRights` - Права доступу користувача (можливі значення: `FULL`, `READ_ALL`, `READ_ONLY`)
- `login` - Логін користувача (електронна пошта, від 2 до 100 символів)
- `password` - Пароль користувача (не менше 6 символів)
 
Додаток Б
Код таблиці «Користувачі»


01 @Entity
02 @Table(name = "users")
03 @Getter
04 @Setter
05 public class User {
06 
07     @Id
08     @GeneratedValue(strategy = GenerationType.IDENTITY)
09     private Long userID;
10 
11     @JsonProperty("first_name")
12     @NotBlank(message = "First name is required")
13     @Column(nullable = false)
14     private String firstName;
15 
16     @JsonProperty("last_name")
17     @NotBlank(message = "Last name is required")
18     @Column(nullable = false)
19     private String lastName;
20 
21     @Enumerated(EnumType.STRING)
22     @Column(nullable = false)
23     private Role role;
24 
25     @JsonProperty("access_rights")
26     @NotBlank(message = "Access rights are required")
27     @Column(nullable = false)
28     private String accessRights;
29 
30     @Column(nullable = false, unique = true)
31     @NotBlank(message = "Login is required")
32     @Email(message = "Login must be a valid email address")
33     private String login;
34 
35     @Column(nullable = false)
36     @NotBlank(message = "Password is required")
37     @Size(min = 6, message = "Password must be at least 6 characters long")
38     private String password;
39 } 
Додаток В
Код сервісу «Користувачі»


01 @Service
02 public class UserService {
03     private final UserRepository userRepository;
04 
05     public UserService(UserRepository userRepository) {
06         this.userRepository = userRepository;
07     }
08 
09     public User createUser(User user) {
10         try {
11             user.setPassword(AES256Encryption.encrypt(user.getPassword()));
12         } catch (Exception e) {
13             throw new RuntimeException(e);
14         }
15         return userRepository.save(user);
16     }
17 
18     public User getUserById(Long id) {
19         return userRepository.findById(id)
20                 .orElseThrow(() -> new RuntimeException("User not found"));
21     }
22 
23     public List<User> getAllUsers() {
24         return userRepository.findAll();
25     }
26 
27     public User updateUser(Long id, User userDetails) {
28         User user = getUserById(id);
29         user.setFirstName(userDetails.getFirstName());
30         user.setLastName(userDetails.getLastName());
31         user.setRole(userDetails.getRole());
32         user.setAccessRights(userDetails.getAccessRights());
33         user.setLogin(userDetails.getLogin());
34         user.setPassword(userDetails.getPassword());
35         return userRepository.save(user);
36     }
37 
38     public void deleteUser(Long id) {
39         userRepository.deleteById(id);
40     }
41 }
 
Додаток Г
Код контролера «Користувачі»


01 @RestController
02 @RequestMapping("/api/users")
03 public class UserController {
04     private final UserService userService;
05 
06     public UserController(UserService userService) {
07         this.userService = userService;
08     }
09 
10     // Створення нового користувача
11     @PostMapping
12     public ResponseEntity<User> createUser(@RequestBody User user) {
13         return ResponseEntity.ok(userService.createUser(user));
14     }
15 
16     // Отримання користувача за ID
17     @GetMapping("/{id}")
18     public ResponseEntity<User> getUserById(@PathVariable Long id) {
19         return ResponseEntity.ok(userService.getUserById(id));
20     }
21 
22     // Отримання всіх користувачів
23     @GetMapping
24     public ResponseEntity<List<User>> getAllUsers() {
25         return ResponseEntity.ok(userService.getAllUsers());
26     }
27 
28     // Оновлення користувача
29     @PutMapping("/{id}")
30     public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user) {
31         return ResponseEntity.ok(userService.updateUser(id, user));
32     }
33 
34     // Видалення користувача
35     @DeleteMapping("/{id}")
36     public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
37         userService.deleteUser(id);
38         return ResponseEntity.noContent().build();
39     }
40 }
