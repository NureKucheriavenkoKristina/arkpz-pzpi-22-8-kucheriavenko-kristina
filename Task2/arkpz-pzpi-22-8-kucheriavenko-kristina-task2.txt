Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра програмної інженерії




Звіт
з лабораторної роботи №2
з дисципліни  «Аналіз та рефакторінг коду»
на тему «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»



Виконала:						    Перевірив:
Ст. гр. ПЗПІ-22-8                                  	    ст. викл. Сокорчук І. П.
Кучерявенко К. Р. 




Харків 2024
2.1 Мета роботи
Розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу.

2.2 Хід роботи
2.2.1 Опис інженерних рішень

Посилання на відеоролик: https://youtu.be/6c6CpT0xdp0

Spring Boot обрано через його простоту налаштування, високу продуктивність і широкий набір функціональних можливостей для створення серверних програм. 
Основні рішення включають:
–	проєкт структурований за підходом MVC (Model-View-Controller);
–	DI (Dependency Injection): завдяки Spring Container залежності керуються автоматично, що полегшує тестування та рефакторинг;
–	spring-boot-starter-web для створення REST API;
–	spring-boot-starter-data-jpa для роботи з базою даних через ORM;
–	spring-boot-starter-validation для валідації вхідних даних;
–	Hibernate для взаємодії з базою даних;
–	REST API обробляється через контролери (@RestController).
PostgreSQL обрано через її потужність, відповідність стандартам SQL і розширені функції для роботи з даними. 
Основні інженерні рішення:
–	конфігурація через application.properties;
–	завдяки Spring Data JPA розробка обмежується створенням інтерфейсів, таких як JpaRepository, що автоматично реалізує CRUD-операції;
–	SQL-запити можна визначати у вигляді JPQL (Java Persistence Query Language) або Native Query.

2.2.2 Специфікація API для взаємодії серверної частини з клієнтами

Вибір REST API зумовлений наступними причинами:
–	простота реалізації та підтримки: REST базується на стандартних методах HTTP (GET, POST, PUT, DELETE), що полегшує розробку і підтримку;
–	широка сумісність: REST підтримується більшістю мов програмування і фреймворків, що робить його універсальним рішенням;
–	легка масштабованість: REST дозволяє легко масштабувати систему;
–	стандартний формат даних: дані передаються у форматах JSON або XML, які зрозумілі для клієнтів і серверів;
–	REST є популярним вибором для веб-додатків, тому для нього доступно багато інструментів, бібліотек та прикладів.
	Використано шаблон MVC (Model-View-Controller) — це популярний архітектурний шаблон, який розділяє програму на три основні компоненти: Model, View, Controller.
Model відповідає за обробку даних і бізнес-логіку. Включає класи, що представляють об'єкти домену, їхню валідацію та взаємодію з базою даних через ORM з Hibernate.
View відповідає за представлення даних користувачу. У контексті REST API View замінюється на JSON-або XML-відповіді, які обробляються клієнтською стороною.

Controller відповідає за отримання запитів від клієнтів, обробку їх із використанням Model та повернення відповіді. У Spring це класи, позначені анотацією @RestController.

 
Рисунок 2.1 – GET-запит до таблиці users


 
Рисунок 2.2 – GET-запит з параметром до таблиці users 

 
Рисунок 2.3 – POST-запит до таблиці users
 
Рисунок 2.4 – PUT-запит до таблиці users
 
Рисунок 2.5 – DELETE-запит до таблиці users

2.2.3 Логіка взаємодії серверної частини з БД

Моделі (Entity) відповідають за структуру даних, які зберігаються в базі. Використовуються ORM (JPA) для відображення об'єктів Java у таблиці БД. Приклад коду у додатку А.
Репозиторії (Repository) виконують безпосередні операції з базою даних, використовують JpaRepository. Приклад коду для таблиці «Користувачі»:
01 @Repository
02 public interface UserRepository extends JpaRepository<User, Long> {
03 }
Сервіси (Service) містять бізнес-логіку роботи з даними, які приходять із БД, взаємодіють із репозиторіями. Приклад коду у додатку Б.
Конфігурації бази даних зберігаються в application.properties.

2.2.4 Фрагменти програмного коду: логіка взаємодії серверної частини з клієнтами.

Контролери (Controller) приймають HTTP-запити від клієнтів, викликають сервіси для виконання бізнес-логіки, повертають відповіді у форматі JSON, XML чи іншому, залежно від потреб клієнта. Код у додатку В.
Аннотації: @RestController, @RequestMapping, @PostMapping, @GetMapping, @PutMapping, @DeleteMapping.
Валідація (Validation) перевіряє правильність даних, які надходять від клієнта. Клас з моделлю використовує валідацію.
Аннотації: @NotBlank, @Future, @ NotNull, тощо.
Глобальні обробники для відповідей з помилками. Використовуються @ControllerAdvice та @ExceptionHandler.

2.2.5 Графічні ілюстрації (рисунки)

Для більшого розуміння створено графічні ілюстрації, де виділено основний сценарій використання системи. Також створено дві діаграми до бази даних для демонстрації зв’язків та структури таблиць. 

 
Рисунок 2.6 – UML діаграма прецедентів для серверної частини

 
Рисунок 2.7 – ER діаграма 

 
Рисунок 2.8 – Діаграма структури БД

Висновки: під час роботи було розроблено базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
Додаток А
Код моделі «Користувачі»


01 @Entity
02 @Table(name = "users")
03 @Getter
04 @Setter
05 public class User {
06 
07     @Id
08     @GeneratedValue(strategy = GenerationType.IDENTITY)
09     private Long userID;
10 
11     @JsonProperty("first_name")
12     @NotBlank(message = "First name is required")
13     @Column(nullable = false)
14     private String firstName;
15 
16     @JsonProperty("last_name")
17     @NotBlank(message = "Last name is required")
18     @Column(nullable = false)
19     private String lastName;
20 
21     @Enumerated(EnumType.STRING)
22     @Column(nullable = false)
23     private Role role;
24 
25     @JsonProperty("access_rights")
26     @NotBlank(message = "Access rights are required")
27     @Column(nullable = false)
28     private String accessRights;
29 
30     @Column(nullable = false, unique = true)
31     @NotBlank(message = "Login is required")
32     @Email(message = "Login must be a valid email address")
33     private String login;
34 
35     @Column(nullable = false)
36     @NotBlank(message = "Password is required")
37     @Size(min = 6, message = "Password must be at least 6 characters long")
38     private String password;
39 } 
Додаток Б
Код сервісу «Користувачі»


01 @Service
02 public class UserService {
03     private final UserRepository userRepository;
04 
05     public UserService(UserRepository userRepository) {
06         this.userRepository = userRepository;
07     }
08 
09     public User createUser(User user) {
10         try {
11             user.setPassword(AES256Encryption.encrypt(user.getPassword()));
12         } catch (Exception e) {
13             throw new RuntimeException(e);
14         }
15         return userRepository.save(user);
16     }
17 
18     public User getUserById(Long id) {
19         return userRepository.findById(id)
20                 .orElseThrow(() -> new RuntimeException("User not found"));
21     }
22 
23     public List<User> getAllUsers() {
24         return userRepository.findAll();
25     }
26 
27     public User updateUser(Long id, User userDetails) {
28         User user = getUserById(id);
29         user.setFirstName(userDetails.getFirstName());
30         user.setLastName(userDetails.getLastName());
31         user.setRole(userDetails.getRole());
32         user.setAccessRights(userDetails.getAccessRights());
33         user.setLogin(userDetails.getLogin());
34         user.setPassword(userDetails.getPassword());
35         return userRepository.save(user);
36     }
37 
38     public void deleteUser(Long id) {
39         userRepository.deleteById(id);
40     }
41 }
 
Додаток В
Код контролера «Користувачі»


01 @RestController
02 @RequestMapping("/api/users")
03 public class UserController {
04     private final UserService userService;
05 
06     public UserController(UserService userService) {
07         this.userService = userService;
08     }
09 
10     // Створення нового користувача
11     @PostMapping
12     public ResponseEntity<User> createUser(@RequestBody User user) {
13         return ResponseEntity.ok(userService.createUser(user));
14     }
15 
16     // Отримання користувача за ID
17     @GetMapping("/{id}")
18     public ResponseEntity<User> getUserById(@PathVariable Long id) {
19         return ResponseEntity.ok(userService.getUserById(id));
20     }
21 
22     // Отримання всіх користувачів
23     @GetMapping
24     public ResponseEntity<List<User>> getAllUsers() {
25         return ResponseEntity.ok(userService.getAllUsers());
26     }
27 
28     // Оновлення користувача
29     @PutMapping("/{id}")
30     public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user) {
31         return ResponseEntity.ok(userService.updateUser(id, user));
32     }
33 
34     // Видалення користувача
35     @DeleteMapping("/{id}")
36     public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
37         userService.deleteUser(id);
38         return ResponseEntity.noContent().build();
39     }
40 }
